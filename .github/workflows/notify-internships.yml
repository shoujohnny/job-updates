name: Notify on New Internship Roles

permissions:
  contents: write

on:
  schedule:
    - cron: '*/10 * * * *'
  workflow_dispatch:

jobs:
  monitor-internships:
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    steps:
      - name: Checkout this repo
        uses: actions/checkout@v4

      - name: Validate Discord webhook
        run: |
          if [ -z "$DISCORD_WEBHOOK_URL" ]; then
            echo "❌ DISCORD_WEBHOOK_URL secret is not configured"
            echo "Please add your Discord webhook URL to the repository secrets"
            exit 1
          fi
          echo "✅ Discord webhook URL is configured"

      - name: Setup Git config
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      - name: Download SimplifyJobs README
        run: |
          echo "Downloading SimplifyJobs README..."
          if ! curl -sSf https://raw.githubusercontent.com/SimplifyJobs/Summer2026-Internships/dev/README.md -o simplify.md; then
            curl -sSf https://raw.githubusercontent.com/SimplifyJobs/Summer2026-Internships/main/README.md -o simplify.md
          fi

      - name: Download Vansh README
        run: |
          echo "Downloading Vansh README..."
          curl -sSf https://raw.githubusercontent.com/vanshb03/Summer2026-Internships/main/README.md -o ouckah.md

      - name: Extract Simplify SWE Roles
        run: |
          mkdir -p cache
          awk '
          BEGIN {flag=0; prev_company=""}
          /^## 💻 Software Engineering Internship Roles/ {flag=1; next}
          /^## [💻🖥️💼🤖📈🔧]/ && flag && !/Software Engineering/ {flag=0}
          /^\| / && flag {
            if ($0 ~ /^\| *Company *\| *Role *\| *Location *\|/) next
            if ($0 ~ /^\|[-| :]*\|?$/) next
            if ($0 ~ /^\| ↳ \|/) {
              # Handle continuation rows - replace ↳ with previous company name
              if (prev_company != "") {
                gsub(/^\| ↳ \|/, "| " prev_company " |")
              }
            } else {
              # Extract company name - simplified approach
              split($0, fields, "|")
              if (length(fields) >= 2) {
                company = fields[2]
                gsub(/^ */, "", company)
                gsub(/ *$/, "", company)
                gsub(/\*|\[|\]/, "", company)
                if (company != "" && company != "↳") {
                  prev_company = company
                }
              }
            }
            print
          }' simplify.md > cache/latest_simplify_swe.md || true

          if [ ! -s cache/latest_simplify_swe.md ]; then
            echo "Fallback: extracting all internships from SimplifyJobs..."
            awk '
            BEGIN {in_table=0}
            /^\| Company \| Role \| Location/ {in_table=1; next}
            /^[^|]/ && in_table {in_table=0}
            /^\|[-| :]*\|?$/ {next}
            /^\| / && in_table {
              if (!/^\| *Company *\| *Role *\| *Location *\|/) print
            }
            ' simplify.md > cache/latest_simplify_swe.md
          fi

          echo "Extracted $(wc -l < cache/latest_simplify_swe.md) SWE roles from SimplifyJobs"

      - name: Extract Vansh Roles (All Positions)
        run: |
          mkdir -p cache
          awk '
          BEGIN {in_table=0; prev_company=""}
          /^\| Company \| Role \| Location/ {in_table=1; next}
          /^[^|]/ && in_table {in_table=0}
          /^\|[-| :]*\|?$/ {next}
          /^\| / && in_table {
            # Skip closed roles and malformed lines
            if (/🔒/ || !/^\| [^|]+ \| [^|]+ \| [^|]+ \|/) next
            
            # Handle continuation rows (↳) by replacing with previous company
            if (/^\| ↳ \|/) {
              if (prev_company != "") {
                gsub(/^\| ↳ \|/, "| " prev_company " |")
              }
            } else {
                             # Extract company name - simplified approach
               split($0, fields, "|")
               if (length(fields) >= 2) {
                 company = fields[2]
                 gsub(/^ */, "", company)
                 gsub(/ *$/, "", company)
                 if (company != "" && company != "↳") {
                   prev_company = company
                 }
               }
            }
            print
          }' ouckah.md > cache/latest_ouckah.md
          
          echo "Extracted $(wc -l < cache/latest_ouckah.md) total roles from Vansh/Ouckah"

      - name: Create normalized role files for better comparison
        run: |
          # Create normalized versions for better duplicate detection
          # Format: company|role|location|link_hash
          normalize_roles() {
            local input_file="$1"
            local output_file="$2"
            
            while IFS= read -r line; do
              [ -z "$line" ] && continue
              
              # Extract fields
              company=$(echo "$line" | cut -d '|' -f2 | sed 's/^ *//; s/ *$//')
              role=$(echo "$line" | cut -d '|' -f3 | sed 's/^ *//; s/ *$//')
              location=$(echo "$line" | cut -d '|' -f4 | sed 's/^ *//; s/ *$//')
              
                             # Extract and hash the main application link for uniqueness
               link=$(echo "$line" | grep -o 'https://[^" )]*' | grep -v "i.imgur.com" | head -1)
               
               # Use md5sum on Linux (GitHub Actions)
               if command -v md5sum >/dev/null 2>&1; then
                 link_hash=$(echo "$link" | md5sum | cut -d' ' -f1)
               elif command -v md5 >/dev/null 2>&1; then
                 link_hash=$(echo "$link" | md5)
               else
                 # Fallback: use simple checksum based on line content
                 link_hash=$(echo "$line" | cksum | cut -d' ' -f1)
               fi
              
              # Create normalized entry
              echo "${company}|${role}|${location}|${link_hash}"
            done < "$input_file" > "$output_file"
          }
          
          normalize_roles "cache/latest_simplify_swe.md" "cache/latest_simplify_normalized.md"
          normalize_roles "cache/latest_ouckah.md" "cache/latest_ouckah_normalized.md"
          
          # Create normalized versions of previous files if they exist
          if [ -f "cache/prev_simplify_swe.md" ]; then
            normalize_roles "cache/prev_simplify_swe.md" "cache/prev_simplify_normalized.md"
          fi
          
          if [ -f "cache/prev_ouckah.md" ]; then
            normalize_roles "cache/prev_ouckah.md" "cache/prev_ouckah_normalized.md"
          fi

      - name: Diff Simplify SWE Roles
        id: simplify_diff
        run: |
          if [ -f cache/prev_simplify_normalized.md ]; then
            # Find new roles by comparing normalized entries
            comm -23 <(sort cache/latest_simplify_normalized.md) <(sort cache/prev_simplify_normalized.md) > cache/new_normalized_simplify.md
            
            # Extract original entries that correspond to new normalized entries
            : > cache/added_simplify.md
            while IFS= read -r norm_line; do
              [ -z "$norm_line" ] && continue
              link_hash=$(echo "$norm_line" | cut -d'|' -f4)
              
              # Find matching original line by link hash
              while IFS= read -r orig_line; do
                [ -z "$orig_line" ] && continue
                orig_link=$(echo "$orig_line" | grep -o 'https://[^" )]*' | grep -v "i.imgur.com" | head -1)
                orig_hash=$(echo "$orig_link" | md5sum | cut -d' ' -f1)
                
                if [ "$orig_hash" = "$link_hash" ]; then
                  echo "$orig_line" >> cache/added_simplify.md
                  break
                fi
              done < cache/latest_simplify_swe.md
            done < cache/new_normalized_simplify.md
          else
            # First run - take a reasonable sample but not just 3 entries
            head -10 cache/latest_simplify_swe.md > cache/added_simplify.md
          fi

          if [ -s cache/added_simplify.md ]; then
            echo "new_simplify=true" >> $GITHUB_OUTPUT
          else
            echo "new_simplify=false" >> $GITHUB_OUTPUT
          fi

      - name: Diff Vansh Roles
        id: ouckah_diff
        run: |
          if [ -f cache/prev_ouckah_normalized.md ]; then
            # Find new roles by comparing normalized entries
            comm -23 <(sort cache/latest_ouckah_normalized.md) <(sort cache/prev_ouckah_normalized.md) > cache/new_normalized_ouckah.md
            
            # Extract original entries that correspond to new normalized entries
            : > cache/added_ouckah.md
            while IFS= read -r norm_line; do
              [ -z "$norm_line" ] && continue
              link_hash=$(echo "$norm_line" | cut -d'|' -f4)
              
              # Find matching original line by link hash
              while IFS= read -r orig_line; do
                [ -z "$orig_line" ] && continue
                orig_link=$(echo "$orig_line" | grep -o 'https://[^" )]*' | grep -v "i.imgur.com" | head -1)
                orig_hash=$(echo "$orig_link" | md5sum | cut -d' ' -f1)
                
                if [ "$orig_hash" = "$link_hash" ]; then
                  echo "$orig_line" >> cache/added_ouckah.md
                  break
                fi
              done < cache/latest_ouckah.md
            done < cache/new_normalized_ouckah.md
          else
            # First run - take a reasonable sample but not just 3 entries
            head -10 cache/latest_ouckah.md > cache/added_ouckah.md
          fi

          if [ -s cache/added_ouckah.md ]; then
            echo "new_ouckah=true" >> $GITHUB_OUTPUT
          else
            echo "new_ouckah=false" >> $GITHUB_OUTPUT
          fi

      - name: Notify Discord - Simplify SWE
        if: steps.simplify_diff.outputs.new_simplify == 'true'
        run: |
          escape_md() {
            echo "$1" | sed -e 's/\\/\\\\/g' -e 's/\*/\\*/g' -e 's/_/\\_/g' -e 's/`/\\`/g' -e 's/~/\\~/g' -e 's/>/\\>/g' -e 's/|/\\|/g'
          }

          clean_html() {
            echo "$1" | sed -e 's/<[^>]*>//g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/\&/g' | xargs
          }

          clean_location() {
            # Handle multiple locations separated by </br> or line breaks
            echo "$1" | sed -e 's|</br>|, |g' -e 's|<br/>|, |g' -e 's|<br>|, |g' -e 's/  */ /g' | xargs
          }

          count=0
          repo_url="https://github.com/SimplifyJobs/Summer2026-Internships"
          echo "Processing $(wc -l < cache/added_simplify.md) new SimplifyJobs SWE roles..."
          while IFS= read -r line && [ $count -lt 5 ]; do
            [ -z "$line" ] && continue
            pipe_count=$(echo "$line" | grep -o '|' | wc -l)
            [ "$pipe_count" -lt 4 ] && continue

            # Extract fields and clean them
            company_raw=$(echo "$line" | cut -d '|' -f2)
            company=$(escape_md "$(clean_html "$company_raw")")
            
            role_raw=$(echo "$line" | cut -d '|' -f3)
            role=$(escape_md "$(clean_html "$role_raw")")
            
            location_raw=$(echo "$line" | cut -d '|' -f4)
            location=$(escape_md "$(clean_location "$(clean_html "$location_raw")")")
            
            # Extract first valid application link
            link=$(echo "$line" | grep -o 'https://[^" )]*' | grep -v "i.imgur.com" | head -1)

            msg="🚨 **New SWE Internship** 💻\n\n**Company**: $company\n**Role**: $role\n**Location**: $location"
            [ -n "$link" ] && msg="$msg\n**Apply**: $link"
            msg="$msg\n**Source**: [SimplifyJobs Summer 2026]($repo_url)"

            echo "Sending notification for: $company - $role - $location"
            curl -s -H "Content-Type: application/json" -X POST -d "{\"content\": \"$msg\"}" "$DISCORD_WEBHOOK_URL"
            count=$((count + 1))
            sleep 2
          done < cache/added_simplify.md
          
          echo "Sent $count SimplifyJobs SWE notifications"

      - name: Notify Discord - Vansh Roles (All Positions)
        if: steps.ouckah_diff.outputs.new_ouckah == 'true'
        run: |
          escape_md() {
            echo "$1" | sed -e 's/\\/\\\\/g' -e 's/\*/\\*/g' -e 's/_/\\_/g' -e 's/`/\\`/g' -e 's/~/\\~/g' -e 's/>/\\>/g' -e 's/|/\\|/g'
          }

          clean_html() {
            echo "$1" | sed -e 's/<[^>]*>//g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/\&/g' | xargs
          }

          clean_location() {
            # Handle multiple locations separated by </br> or line breaks
            echo "$1" | sed -e 's|</br>|, |g' -e 's|<br/>|, |g' -e 's|<br>|, |g' -e 's/  */ /g' | xargs
          }

          count=0
          repo_url="https://github.com/vanshb03/Summer2026-Internships"
          echo "Processing $(wc -l < cache/added_ouckah.md) new Vansh/Ouckah roles..."
          while IFS= read -r line && [ $count -lt 5 ]; do
            [ -z "$line" ] && continue
            pipe_count=$(echo "$line" | grep -o '|' | wc -l)
            [ "$pipe_count" -lt 4 ] && continue

            # Extract fields and clean them
            company_raw=$(echo "$line" | cut -d '|' -f2)
            company=$(escape_md "$(clean_html "$company_raw")")
            
            role_raw=$(echo "$line" | cut -d '|' -f3)
            role=$(escape_md "$(clean_html "$role_raw")")
            
            location_raw=$(echo "$line" | cut -d '|' -f4)
            location=$(escape_md "$(clean_location "$(clean_html "$location_raw")")")
            
            # Extract first valid application link
            link=$(echo "$line" | grep -o 'https://[^" )]*' | grep -v "i.imgur.com" | head -1)

            # Determine role type emoji
            role_emoji="💼"
            if echo "$role" | grep -qi "software\|engineer\|developer\|swe"; then
              role_emoji="💻"
            elif echo "$role" | grep -qi "data\|machine learning\|ai\|ml"; then
              role_emoji="🤖"
            elif echo "$role" | grep -qi "quant\|trading\|finance"; then
              role_emoji="📈"
            fi

            msg="🔔 **New Internship** $role_emoji\n\n**Company**: $company\n**Role**: $role\n**Location**: $location"
            [ -n "$link" ] && msg="$msg\n**Apply**: $link"
            msg="$msg\n**Source**: [Vansh/Ouckah Summer 2026]($repo_url)"

            echo "Sending notification for: $company - $role - $location"
            curl -s -H "Content-Type: application/json" -X POST -d "{\"content\": \"$msg\"}" "$DISCORD_WEBHOOK_URL"
            count=$((count + 1))
            sleep 2
          done < cache/added_ouckah.md
          
          echo "Sent $count Vansh/Ouckah notifications"

      - name: Save state files
        run: |
          cp cache/latest_simplify_swe.md cache/prev_simplify_swe.md
          cp cache/latest_ouckah.md cache/prev_ouckah.md

      - name: Commit updated role caches
        run: |
          git add cache/prev_*.md || true

          if git diff --staged --quiet; then
            echo "✅ No changes to commit"
            exit 0
          fi

          echo "📝 Committing cache updates..."
          if git commit -m "Update internship role cache [$(date)]"; then
            echo "✅ Successfully committed changes"
            if git push; then
              echo "✅ Successfully pushed to repository"
            else
              echo "⚠️ Push failed - cache updates committed locally but not pushed"
            fi
          else
            echo "⚠️ Commit failed"
          fi
          exit 0
